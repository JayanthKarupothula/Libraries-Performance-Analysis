import * as React from "react";
import { render } from "react-dom";
import SpriteText from 'three-spritetext';
import ForceGraph3D from 'react-force-graph-3d';

import "./styles.css";


class NameForm extends React.Component {
    constructor(props) {
      super(props);
      this.state = {value: '',
    newNames:[]};
  
      // this.handleChange = this.handleChange.bind(this);
      // this.handleSubmit = this.handleSubmit.bind(this);
    }
  
     handleChange=(event)=>{
      this.setState({value: event.target.value});
      console.log(event)
    }
  
    handleSubmit=(event) =>{
     // alert('A name was submitted: ' + this.state.value);
     //render(<App />);
      // event.preventDefault();
      const temp = [...this.state.newNames]
      temp.push(this.state.value)
      console.log({temp})
      this.setState({
        newNames: [...temp]
      })
    }
  
    render() {
      return (
        // <form >
        <React.Fragment>
          <label>
            Name:
            <input type="text" onChange={this.handleChange} />
          </label>
          <button  onClick={()=>this.handleSubmit()}>Add</button>
          <div>
            <GraphUI newNames={this.state.newNames}/>
          </div>
        </React.Fragment>
        // </form>
      );
    }
  }

function GraphUI(props) {
console.log({props})
  const myData = {
    nodes: [],
    links: []
   };
  //  var nbNode = 10;
  //  var nbEdge = 10;
  for (let i = 0; i < props.newNames.length; i++) {
    myData.nodes.push({id : props.newNames[i]});
  }
  // for (let i = 0; i < props.newNames.length; i++) {
  //   myData.links.push(
  //     {
  //       //id : i ,
  //     source: '' + (Math.random() * props.newNames.length | 0), 
  //     target: '' + (Math.random() * props.newNames.length | 0),
  // });
  
  // }
  return (
    
    <div className="GraphUI">
      <ForceGraph3D
  graphData={myData}
  nodeLabel="id"
  nodeThreeObjectExtend={true}
  nodeThreeObject={function (node) {
    // extend link with text sprite
    const sprite = new SpriteText(`${node.id} `);
    sprite.color = '#FF0000';
    sprite.textHeight = 1.5;
    return sprite;
  }}
  linkThreeObjectExtend={true}
  linkThreeObject={function (link) {
    // extend link with text sprite
    const sprite = new SpriteText(`${link.source} > ${link.target}`);
    sprite.color = 'lightgrey';
    sprite.textHeight = 1.5;
    return sprite;
  }}
  linkPositionUpdate={(sprite, { start, end }) => {
    const middlePos = Object.assign({},...['x', 'y', 'z'].map(c => ({
      [c]: start[c] + (end[c] - start[c]) / 2 // calc middle point
    })));

    // Position sprite
    Object.assign(sprite.position, middlePos);
    return true;
  }}
  
/>
      ;
    </div>
  );
}

const  App = () => {
  
    return (
      <div className="App">
        <div>
          
          <NameForm />
        </div>
        {/* <div>
        <GraphUI />
        </div> */}
      </div>
    );

  
}

const rootElement = document.getElementById("root");
render(< App />, rootElement);